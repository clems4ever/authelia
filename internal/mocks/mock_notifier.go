// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/authelia/authelia (interfaces: NotificationProvider)
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNotificationProvider is a mock of NotificationProvider interface.
type MockNotificationProvider struct {
	ctrl     *gomock.Controller
	recorder *MockNotificationProviderMockRecorder
}

// MockNotificationProviderMockRecorder is the mock recorder for MockNotificationProvider.
type MockNotificationProviderMockRecorder struct {
	mock *MockNotificationProvider
}

// NewMockNotificationProvider creates a new mock instance.
func NewMockNotificationProvider(ctrl *gomock.Controller) *MockNotificationProvider {
	mock := &MockNotificationProvider{ctrl: ctrl}
	mock.recorder = &MockNotificationProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotificationProvider) EXPECT() *MockNotificationProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNotificationProvider) Send(recipient, subject, body, htmlBody string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", recipient, subject, body, htmlBody)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNotificationProviderMockRecorder) Send(recipient, subject, body, htmlBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNotificationProvider)(nil).Send), recipient, subject, body, htmlBody)
}

// StartupCheck mocks base method.
func (m *MockNotificationProvider) StartupCheck() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartupCheck")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartupCheck indicates an expected call of StartupCheck.
func (mr *MockNotificationProviderMockRecorder) StartupCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartupCheck", reflect.TypeOf((*MockNotificationProvider)(nil).StartupCheck))
}
